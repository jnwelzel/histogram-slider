{"version":3,"sources":["components/addons/HistogramContainer.js","components/WunderSlider/WunderSlider.js","components/RangeFilter/RangeFilter.js","App.js","serviceWorker.js","index.js"],"names":["HistogramContainer","currentMinValue","currentMaxValue","range","maxCount","height","width","length","style","maxHeight","backgroundColor","display","map","item","index","barHeight","count","yAxisOffset","barColor","price","key","title","fill","y","x","WunderSlider","showHistogram","onChange","histogramRange","minValue","maxValue","values","sliderAlgorithm","getPosition","value","min","max","currMin","currMax","currItemIndex","barWidth","i","getValue","pos","decimal","rangeIndex","Math","floor","positionInBar","lastIndex","console","log","priceDifference","currentPrice","round","onValuesUpdated","algorithm","RangeFilter","useState","minHandle","setMinHandle","maxHandle","setMaxHandle","event","marginTop","type","name","e","Number","target","HISTOGRAM_DATA","priceHistogram","priceMin","priceMax","countMax","App","setShowHistogram","className","marginBottom","href","rel","borderTop","checked","id","htmlFor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6752a66d.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst propTypes = {\n  currentMinValue: PropTypes.number.isRequired,\n  currentMaxValue: PropTypes.number.isRequired,\n  range: PropTypes.array.isRequired,\n  maxCount: PropTypes.number.isRequired,\n  height: PropTypes.number,\n};\n\nconst DEFAULT_HEIGHT = 64;\n\nconst HistogramContainer = ({\n  currentMinValue,\n  currentMaxValue,\n  range,\n  maxCount,\n  height = DEFAULT_HEIGHT,\n}) => {\n  const width = 100 / range.length;\n\n  return (\n    <svg\n      style={{\n        maxHeight: height,\n        backgroundColor: \"#f4f3f3\",\n        width: \"100%\",\n        display: \"block\",\n      }}\n    >\n      {range.map((item, index) => {\n        const barHeight = (100 * item.count) / maxCount || 0;\n        const yAxisOffset = (barHeight / 100) * height;\n        const barColor =\n          item.price >= currentMinValue && item.price <= currentMaxValue\n            ? \"#732DD9\"\n            : \"#b5bec5\";\n\n        return (\n          <rect\n            key={item.price}\n            title={item.price}\n            fill={barColor}\n            width={`${width}%`}\n            height={`${barHeight}%`}\n            y={height - yAxisOffset}\n            x={`${width * index}%`}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\nHistogramContainer.propTypes = propTypes;\n\nexport default HistogramContainer;\n","import PropTypes from \"prop-types\";\nimport HistogramContainer from \"../addons/HistogramContainer\";\nimport \"./WunderSlider.css\";\nimport React from \"react\";\nimport Rheostat from \"rheostat\";\n\nconst propTypes = {\n  showHistogram: PropTypes.bool,\n  onChange: PropTypes.func,\n  histogramRange: PropTypes.array,\n  currentMinValue: PropTypes.number,\n  currentMaxValue: PropTypes.number,\n  maxCount: PropTypes.number,\n  minValue: PropTypes.number.isRequired,\n  maxValue: PropTypes.number.isRequired,\n  values: PropTypes.array.isRequired,\n};\n\nconst WunderSlider = ({\n  showHistogram,\n  onChange,\n  histogramRange,\n  currentMinValue,\n  currentMaxValue,\n  maxCount,\n  minValue,\n  maxValue,\n  values,\n}) => {\n  const sliderAlgorithm = {\n    getPosition(value, min, max) {\n      if (value < min) {\n        return 0;\n      }\n      if (value > max) {\n        return 100;\n      }\n\n      let currMin = min;\n      let currMax = max;\n      let currItemIndex = 0;\n      const barWidth = 100 / histogramRange.length;\n      for (let i = histogramRange.length - 1; i >= 0; i--) {\n        if (value > histogramRange[i].price) {\n          currMin = histogramRange[i].price;\n          currMax = histogramRange[i + 1].price;\n          currItemIndex = i;\n          break;\n        }\n      }\n\n      const currPosInBar = (value - currMin) / (currMax - currMin);\n      const relativePos = barWidth * currPosInBar;\n      const res = currItemIndex * barWidth + relativePos;\n      return res;\n    },\n    getValue(pos, min, max) {\n      const decimal = pos / 100;\n\n      if (pos === 0) {\n        return min;\n      }\n\n      if (pos === 100) {\n        return max;\n      }\n\n      if (showHistogram) {\n        const barWidth = 100 / histogramRange.length;\n        const rangeIndex = Math.floor(pos / barWidth); // get the index of the current element in the range array\n        const leftStart = rangeIndex * barWidth; // left % position of the current bar\n        const positionInBar = (pos - leftStart) / barWidth; // slider % position inside current bar (0...1)\n        const lastIndex = histogramRange.length - 1;\n        console.log(rangeIndex, lastIndex);\n        const priceRange =\n          rangeIndex < lastIndex\n            ? histogramRange[rangeIndex + 1].price -\n              histogramRange[rangeIndex].price\n            : max - histogramRange[lastIndex].price; // Price range current bar represents\n        // Calculate priceDifference: priceRange relative to positionInBar\n        const priceDifference = priceRange * positionInBar;\n        // Add priceDifference to current bar price, this is our result\n        const currentPrice = histogramRange[rangeIndex].price + priceDifference;\n        return Math.round(currentPrice);\n      }\n\n      return Math.round((max - min) * decimal + min);\n    },\n  };\n  return (\n    <div>\n      {showHistogram && (\n        <HistogramContainer\n          range={histogramRange}\n          currentMinValue={currentMinValue}\n          currentMaxValue={currentMaxValue}\n          maxCount={maxCount}\n        />\n      )}\n      <Rheostat\n        values={values}\n        min={minValue}\n        max={maxValue}\n        onValuesUpdated={onChange}\n        algorithm={sliderAlgorithm}\n      />\n    </div>\n  );\n};\n\nWunderSlider.propTypes = propTypes;\n\nexport default WunderSlider;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport WunderSlider from \"../WunderSlider/WunderSlider\";\n\nconst propTypes = {\n  minValue: PropTypes.number.isRequired,\n  maxValue: PropTypes.number.isRequired,\n  maxCount: PropTypes.number.isRequired,\n  showHistogram: PropTypes.bool,\n  histogramRange: PropTypes.array,\n};\n\nconst RangeFilter = ({\n  minValue,\n  maxValue,\n  maxCount,\n  showHistogram,\n  histogramRange,\n}) => {\n  const [minHandle, setMinHandle] = useState(minValue);\n  const [maxHandle, setMaxHandle] = useState(maxValue);\n\n  const onChangeSlider = (event) => {\n    const { values } = event;\n    setMinHandle(values[0]);\n    setMaxHandle(values[1]);\n  };\n\n  return (\n    <div>\n      <WunderSlider\n        maxCount={maxCount}\n        minValue={minValue}\n        maxValue={maxValue}\n        values={[minHandle, maxHandle]}\n        showHistogram={showHistogram}\n        onChange={onChangeSlider}\n        histogramRange={histogramRange}\n        currentMinValue={minHandle}\n        currentMaxValue={maxHandle}\n      />\n      <div style={{ marginTop: 30 }}>\n        <input\n          type=\"number\"\n          name=\"min\"\n          onChange={(e) => setMinHandle(Number(e.target.value))}\n          value={minHandle}\n          min={minValue}\n          max={maxValue}\n        />\n        -\n        <input\n          type=\"number\"\n          name=\"max\"\n          onChange={(e) => setMaxHandle(Number(e.target.value))}\n          value={maxHandle}\n          min={minValue}\n          max={maxValue}\n        />\n      </div>\n    </div>\n  );\n};\n\nRangeFilter.propTypes = propTypes;\n\nexport default RangeFilter;\n","import React, { useState } from \"react\";\nimport RangeFilter from \"./components/RangeFilter/RangeFilter\";\nimport \"./App.css\";\n\nconst HISTOGRAM_DATA = {\n  priceHistogram: [\n    { price: 888, count: 1 },\n    { price: 1200, count: 3 },\n    { price: 1500, count: 4 },\n    { price: 1600, count: 2 },\n    { price: 1700, count: 8 },\n    { price: 1800, count: 4 },\n    { price: 1900, count: 5 },\n    { price: 2000, count: 15 },\n    { price: 2100, count: 35 },\n    { price: 2200, count: 25 },\n    { price: 2300, count: 42 },\n    { price: 2400, count: 22 },\n    { price: 2500, count: 18 },\n    { price: 3000, count: 15 },\n    { price: 4000, count: 11 },\n    { price: 6000, count: 12 },\n    { price: 7000, count: 19 },\n    { price: 8000, count: 11 },\n    { price: 9000, count: 9 },\n    { price: 10000, count: 6 },\n    { price: 12000, count: 1 },\n  ],\n  priceMin: 888,\n  priceMax: 12000,\n  countMax: 42,\n};\n\nconst App = () => {\n  const [showHistogram, setShowHistogram] = useState(true);\n\n  const toggleShowHistogram = () => {\n    setShowHistogram(!showHistogram);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Rheostat</h1>\n      <p style={{ marginBottom: 30 }}>\n        <a\n          href=\"https://github.com/airbnb/rheostat\"\n          target=\"_blank\"\n          rel=\"noreferrer noopener\"\n        >\n          Github\n        </a>\n      </p>\n      <RangeFilter\n        minValue={HISTOGRAM_DATA.priceMin}\n        maxValue={HISTOGRAM_DATA.priceMax}\n        maxCount={HISTOGRAM_DATA.countMax}\n        values={[HISTOGRAM_DATA.priceMin, HISTOGRAM_DATA.priceMax]}\n        showHistogram={showHistogram}\n        histogramRange={HISTOGRAM_DATA.priceHistogram}\n      />\n      <div style={{ borderTop: \"1px solid #ddd\", marginTop: \"30px\" }}>\n        <p>\n          <input\n            onChange={toggleShowHistogram}\n            checked={showHistogram}\n            id=\"showHistogram\"\n            name=\"showHistogram\"\n            type=\"checkbox\"\n          />\n          <label htmlFor=\"showHistogram\">Show histogram</label>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"rheostat/initialize\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}